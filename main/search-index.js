var searchIndex = JSON.parse('{\
"watchable":{"doc":"Allows watching for value changes in both multi-threaded …","t":[3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Sentinel","SentinelStream","Watchable","WatchableReadGuard","WatchableWriteGuard","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","from","from","from","from","from","has_sentinels","into","into","into","into","into","into_iter","into_stream","new","next","peek","poll_next","read","replace","sentinels","subscribe","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_poll_next","type_id","type_id","type_id","type_id","type_id","update","update_if_needed","watch","watch_async","watch_timeout","watch_until","write"],"q":["watchable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An observer of a <code>Watchable</code> value.","Asynchronous iterator for a <code>Sentinel</code>. Implements <code>Stream</code>.","A watchable wrapper for a value.","A read guard that allows reading the currently stored …","A write guard that allows updating the currently stored …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if there are any <code>Sentinel</code>s for this value.","","","","","","","Returns this sentinel in a type that implements <code>Stream</code>.","Returns a new instance with the initial value provided.","","Returns a read guard that allows reading the currently …","","Returns a read guard that allows reading the currently …","Replaces the current value contained and notifies all …","Returns the number of <code>Sentinel</code>s for this value.","Returns a new sentinel that can monitor for changes to the …","","","","","","","","","","","","","","","","","","","Updates the current value, if it is different from the …","Updates this instance’s state to reflect that it has …","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Returns a write guard that allows updating the value. If …"],"i":[0,0,0,0,0,1,2,3,4,5,1,2,3,4,5,3,4,3,4,1,2,2,2,4,3,4,5,1,2,3,4,5,3,1,2,3,4,5,4,4,3,4,4,5,4,3,3,3,3,4,1,2,3,4,5,1,2,3,4,5,5,1,2,3,4,5,3,4,4,4,4,4,3],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["watchable",3]],[[],["sentinel",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sentinelstream",3]],[[]],[[],["option",4]],[[],["watchablereadguard",3]],[[["pin",3],["context",3]],["poll",4,[["option",4]]]],[[],["watchablereadguard",3]],[[]],[[],["usize",15]],[[],["sentinel",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["pin",3],["context",3]],["poll",4,[["option",4,[["result",4]]]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["bool",15]],[[]],[[]],[[["duration",3]]],[[["instant",3]]],[[],["watchablewriteguard",3]]],"p":[[3,"WatchableReadGuard"],[3,"WatchableWriteGuard"],[3,"Watchable"],[3,"Sentinel"],[3,"SentinelStream"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};