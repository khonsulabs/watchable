var searchIndex = JSON.parse('{\
"watchable":{"doc":"Enables watching for value changes in both multi-threaded …","t":[3,13,13,4,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Disconnected","Disconnected","Timeout","TimeoutError","Watchable","WatchableReadGuard","WatchableWriteGuard","Watcher","WatcherStream","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","drop","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","has_watchers","into","into","into","into","into","into","into","into_inner","into_iter","into_stream","is_current","mark_read","new","next","next_value","next_value_async","peek","poll_next","read","replace","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll_next","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","watch","watch","watch_async","watch_timeout","watch_until","watchers","write"],"q":["watchable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A watch operation failed because all <code>Watchable</code> instances …","A watch operation failed because all <code>Watchable</code> instances …","No new values were written before the timeout elapsed","A watch operation with a timeout failed.","A watchable wrapper for a value.","A read guard that allows reading the currently stored …","A write guard that allows updating the currently stored …","An observer of a <code>Watchable</code> value.","Asynchronous iterator for a <code>Watcher</code>. Implements <code>Stream</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if there are any <code>Watcher</code>s for this value.","","","","","","","","Returns the wrapped <code>Watcher</code>.","","Returns this watcher in a type that implements <code>Stream</code>.","Returns true if the latest value has been read from this …","Updates this instance’s state to reflect that it has …","Returns a new instance with the initial value provided.","","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Returns a read guard that allows reading the currently …","","Returns a read guard that allows reading the currently …","Replaces the current value contained and notifies all …","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates the current value, if it is different from the …","Returns a new watcher that can monitor for changes to the …","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Returns the number of <code>Watcher</code>s for this value.","Returns a write guard that allows updating the value. If …"],"i":[0,1,1,0,0,0,0,0,0,2,3,4,5,6,1,7,2,3,4,5,6,1,7,4,5,4,5,4,2,3,3,3,4,5,6,1,4,5,6,6,1,1,7,2,3,4,5,6,1,7,4,2,3,4,5,6,1,7,7,5,5,5,5,4,5,5,5,5,7,5,4,4,5,6,1,2,3,4,5,6,1,7,2,3,4,5,6,1,7,7,2,3,4,5,6,1,7,4,4,5,5,5,5,4,4],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["watcher",3]],[[]],[[]],[[],["watchable",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["disconnected",3]],["bool",15]],[[["timeouterror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["watcher",3]],[[]],[[],["watcherstream",3]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["option",4]],[[],["result",4,[["disconnected",3]]]],[[]],[[],["watchablereadguard",3]],[[["pin",3],["context",3]],["poll",4,[["option",4]]]],[[],["watchablereadguard",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["pin",3],["context",3]],["poll",4,[["option",4,[["result",4]]]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["watcher",3]],[[],["result",4,[["disconnected",3]]]],[[]],[[["duration",3]],["result",4,[["timeouterror",4]]]],[[["instant",3]],["result",4,[["timeouterror",4]]]],[[],["usize",15]],[[],["watchablewriteguard",3]]],"p":[[4,"TimeoutError"],[3,"WatchableReadGuard"],[3,"WatchableWriteGuard"],[3,"Watchable"],[3,"Watcher"],[3,"Disconnected"],[3,"WatcherStream"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};