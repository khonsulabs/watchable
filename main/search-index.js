var searchIndex = JSON.parse('{\
"watchable":{"doc":"<code>watchable</code> implements an observable RwLock-like type that …","t":[3,13,13,4,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Disconnected","Disconnected","Timeout","TimeoutError","Watchable","WatchableReadGuard","WatchableWriteGuard","Watcher","WatcherStream","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","drop","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","get","has_watchers","into","into","into","into","into","into","into","into_inner","into_iter","into_stream","is_current","mark_read","new","next","next_value","next_value_async","peek","poll_next","read","read","replace","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll_next","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","watch","watch","watch_async","watch_timeout","watch_until","watchers","write"],"q":["watchable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A watch operation failed because all <code>Watchable</code> instances …","A watch operation failed because all <code>Watchable</code> instances …","No new values were written before the timeout elapsed","A watch operation with a timeout failed.","A watchable wrapper for a value.","A read guard that allows reading the currently stored …","A write guard that allows updating the currently stored …","An observer of a <code>Watchable</code> value.","Asynchronous iterator for a <code>Watcher</code>. Implements <code>Stream</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the currently contained value.","Returns the currently contained value. This function marks …","Returns true if there are any <code>Watcher</code>s for this value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the wrapped <code>Watcher</code>.","","Returns this watcher in a type that implements <code>Stream</code>.","Returns true if the latest value has been read from this …","Updates this instance’s state to reflect that it has …","Returns a new instance with the initial value provided.","","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Returns a read guard that allows reading the currently …","","Returns a guard which can be used to access the value held …","Returns a read guard that allows reading the currently …","Replaces the current value contained and notifies all …","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates the current value, if it is different from the …","Returns a new watcher that can monitor for changes to the …","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Watches for a new value to be stored in the source …","Returns the number of <code>Watcher</code>s for this value.","Returns a write guard that allows updating the value. If …"],"i":[0,1,1,0,0,0,0,0,0,2,3,4,5,6,1,7,2,3,4,5,6,1,7,4,5,4,5,4,2,3,3,3,4,5,6,1,4,5,6,6,1,1,7,2,3,4,5,6,1,7,4,5,4,2,3,4,5,6,1,7,7,5,5,5,5,4,5,5,5,5,7,4,5,4,4,5,6,1,2,3,4,5,6,1,7,2,3,4,5,6,1,7,7,2,3,4,5,6,1,7,4,4,5,5,5,5,4,4],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["watchable",3]],["watchable",3]],[[["watcher",3,[["clone",8]]]],["watcher",3,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["watchable",3,[["default",8]]]],[[["watchablereadguard",3]]],[[["watchablewriteguard",3]]],[[["watchablewriteguard",3]]],[[["watchablewriteguard",3]]],[[["watchable",3]]],[[["watcher",3]]],[[["disconnected",3],["disconnected",3]],["bool",0]],[[["timeouterror",4],["timeouterror",4]],["bool",0]],[[["watchable",3,[["debug",8]]],["formatter",3]],["result",6]],[[["watcher",3,[["debug",8]]],["formatter",3]],["result",6]],[[["disconnected",3],["formatter",3]],["result",6]],[[["disconnected",3],["formatter",3]],["result",6]],[[["timeouterror",4],["formatter",3]],["result",6]],[[["timeouterror",4],["formatter",3]],["result",6]],[[["watcherstream",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["watchable",3]]],[[["watcher",3]]],[[["watchable",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["watcherstream",3]],["watcher",3]],[[]],[[["watcher",3]],["watcherstream",3]],[[["watcher",3]],["bool",0]],[[["watcher",3]],["bool",0]],[[],["watchable",3]],[[["watcher",3]],["option",4]],[[["watcher",3]],["result",4,[["disconnected",3]]]],[[["watcher",3]],["future",8]],[[["watcher",3]],["watchablereadguard",3]],[[["pin",3,[["watcherstream",3]]],["context",3]],["poll",4,[["option",4]]]],[[["watchable",3]],["watchablereadguard",3]],[[["watcher",3]],["watchablereadguard",3]],[[["watchable",3]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["pin",3],["context",3]],["poll",4,[["option",4,[["result",4]]]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["watchable",3]],["result",4]],[[["watchable",3]],["watcher",3]],[[["watcher",3]],["result",4,[["disconnected",3]]]],[[["watcher",3]],["future",8]],[[["watcher",3],["duration",3]],["result",4,[["timeouterror",4]]]],[[["watcher",3],["instant",3]],["result",4,[["timeouterror",4]]]],[[["watchable",3]],["usize",0]],[[["watchable",3]],["watchablewriteguard",3]]],"p":[[4,"TimeoutError"],[3,"WatchableReadGuard"],[3,"WatchableWriteGuard"],[3,"Watchable"],[3,"Watcher"],[3,"Disconnected"],[3,"WatcherStream"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
